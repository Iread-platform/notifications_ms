// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using iread_notifications_ms.DataAccess;

namespace iread_notifications_ms.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20210927224753_remove_device_key")]
    partial class remove_device_key
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("iread_notifications_ms.DataAccess.Data.Entity.Device", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("varchar(767)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Token");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("iread_notifications_ms.DataAccess.Data.Entity.DeviceNotification", b =>
                {
                    b.Property<string>("DeviceToken")
                        .HasColumnType("varchar(767)");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<int>("NotificationsId")
                        .HasColumnType("int");

                    b.HasKey("DeviceToken", "NotificationId");

                    b.HasIndex("NotificationsId");

                    b.ToTable("DeviceNotifications");
                });

            modelBuilder.Entity("iread_notifications_ms.DataAccess.Data.Entity.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime");

                    b.Property<TimeSpan>("SendAfter")
                        .HasColumnType("time");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("iread_notifications_ms.DataAccess.Data.Entity.Topic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Topics");
                });

            modelBuilder.Entity("iread_notifications_ms.DataAccess.Data.Entity.SingleNotification", b =>
                {
                    b.HasBaseType("iread_notifications_ms.DataAccess.Data.Entity.Notification");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.ToTable("SingleNotifications");
                });

            modelBuilder.Entity("iread_notifications_ms.DataAccess.Data.Entity.TopicNotification", b =>
                {
                    b.HasBaseType("iread_notifications_ms.DataAccess.Data.Entity.Notification");

                    b.Property<int?>("TopicId")
                        .HasColumnType("int");

                    b.HasIndex("TopicId");

                    b.ToTable("TopicNotifications");
                });

            modelBuilder.Entity("iread_notifications_ms.DataAccess.Data.Entity.DeviceNotification", b =>
                {
                    b.HasOne("iread_notifications_ms.DataAccess.Data.Entity.Device", "Devices")
                        .WithMany("DeviceNotifications")
                        .HasForeignKey("DeviceToken")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iread_notifications_ms.DataAccess.Data.Entity.SingleNotification", "Notifications")
                        .WithMany("DeviceNotifications")
                        .HasForeignKey("NotificationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Devices");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("iread_notifications_ms.DataAccess.Data.Entity.SingleNotification", b =>
                {
                    b.HasOne("iread_notifications_ms.DataAccess.Data.Entity.Notification", null)
                        .WithOne()
                        .HasForeignKey("iread_notifications_ms.DataAccess.Data.Entity.SingleNotification", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("iread_notifications_ms.DataAccess.Data.Entity.TopicNotification", b =>
                {
                    b.HasOne("iread_notifications_ms.DataAccess.Data.Entity.Notification", null)
                        .WithOne()
                        .HasForeignKey("iread_notifications_ms.DataAccess.Data.Entity.TopicNotification", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("iread_notifications_ms.DataAccess.Data.Entity.Topic", "Topic")
                        .WithMany("Notifications")
                        .HasForeignKey("TopicId");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("iread_notifications_ms.DataAccess.Data.Entity.Device", b =>
                {
                    b.Navigation("DeviceNotifications");
                });

            modelBuilder.Entity("iread_notifications_ms.DataAccess.Data.Entity.Topic", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("iread_notifications_ms.DataAccess.Data.Entity.SingleNotification", b =>
                {
                    b.Navigation("DeviceNotifications");
                });
#pragma warning restore 612, 618
        }
    }
}
